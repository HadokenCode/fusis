// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import state "github.com/luizbafilho/fusis/state"

import types "github.com/luizbafilho/fusis/types"

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// AddCheck provides a mock function with given fields: check
func (_m *Store) AddCheck(check types.CheckSpec) error {
	ret := _m.Called(check)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.CheckSpec) error); ok {
		r0 = rf(check)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddDestination provides a mock function with given fields: svc, dst
func (_m *Store) AddDestination(svc *types.Service, dst *types.Destination) error {
	ret := _m.Called(svc, dst)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Service, *types.Destination) error); ok {
		r0 = rf(svc, dst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddService provides a mock function with given fields: svc
func (_m *Store) AddService(svc *types.Service) error {
	ret := _m.Called(svc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Service) error); ok {
		r0 = rf(svc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddWatcher provides a mock function with given fields: ch
func (_m *Store) AddWatcher(ch chan state.State) {
	_m.Called(ch)
}

// DeleteCheck provides a mock function with given fields: check
func (_m *Store) DeleteCheck(check types.CheckSpec) error {
	ret := _m.Called(check)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.CheckSpec) error); ok {
		r0 = rf(check)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDestination provides a mock function with given fields: svc, dst
func (_m *Store) DeleteDestination(svc *types.Service, dst *types.Destination) error {
	ret := _m.Called(svc, dst)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Service, *types.Destination) error); ok {
		r0 = rf(svc, dst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteService provides a mock function with given fields: svc
func (_m *Store) DeleteService(svc *types.Service) error {
	ret := _m.Called(svc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Service) error); ok {
		r0 = rf(svc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDestinations provides a mock function with given fields: svc
func (_m *Store) GetDestinations(svc *types.Service) ([]types.Destination, error) {
	ret := _m.Called(svc)

	var r0 []types.Destination
	if rf, ok := ret.Get(0).(func(*types.Service) []types.Destination); ok {
		r0 = rf(svc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Destination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.Service) error); ok {
		r1 = rf(svc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServices provides a mock function with given fields:
func (_m *Store) GetServices() ([]types.Service, error) {
	ret := _m.Called()

	var r0 []types.Service
	if rf, ok := ret.Get(0).(func() []types.Service); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetState provides a mock function with given fields:
func (_m *Store) GetState() (state.State, error) {
	ret := _m.Called()

	var r0 state.State
	if rf, ok := ret.Get(0).(func() state.State); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(state.State)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Watch provides a mock function with given fields:
func (_m *Store) Watch() {
	_m.Called()
}
