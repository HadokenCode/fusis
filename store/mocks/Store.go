package mocks

import libkvstore "github.com/docker/libkv/store"
import mock "github.com/stretchr/testify/mock"
import store "github.com/luizbafilho/fusis/store"
import types "github.com/luizbafilho/fusis/api/types"

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// AddCheck provides a mock function with given fields: check
func (_m *Store) AddCheck(check types.CheckSpec) error {
	ret := _m.Called(check)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.CheckSpec) error); ok {
		r0 = rf(check)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddDestination provides a mock function with given fields: svc, dst
func (_m *Store) AddDestination(svc *types.Service, dst *types.Destination) error {
	ret := _m.Called(svc, dst)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Service, *types.Destination) error); ok {
		r0 = rf(svc, dst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddService provides a mock function with given fields: svc
func (_m *Store) AddService(svc *types.Service) error {
	ret := _m.Called(svc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Service) error); ok {
		r0 = rf(svc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCheck provides a mock function with given fields: check
func (_m *Store) DeleteCheck(check types.CheckSpec) error {
	ret := _m.Called(check)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.CheckSpec) error); ok {
		r0 = rf(check)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDestination provides a mock function with given fields: svc, dst
func (_m *Store) DeleteDestination(svc *types.Service, dst *types.Destination) error {
	ret := _m.Called(svc, dst)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Service, *types.Destination) error); ok {
		r0 = rf(svc, dst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteService provides a mock function with given fields: svc
func (_m *Store) DeleteService(svc *types.Service) error {
	ret := _m.Called(svc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Service) error); ok {
		r0 = rf(svc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDestinations provides a mock function with given fields:
func (_m *Store) GetDestinations() ([]types.Destination, error) {
	ret := _m.Called()

	var r0 []types.Destination
	if rf, ok := ret.Get(0).(func() []types.Destination); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Destination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKV provides a mock function with given fields:
func (_m *Store) GetKV() libkvstore.Store {
	ret := _m.Called()

	var r0 libkvstore.Store
	if rf, ok := ret.Get(0).(func() libkvstore.Store); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(libkvstore.Store)
		}
	}

	return r0
}

// GetServices provides a mock function with given fields:
func (_m *Store) GetServices() ([]types.Service, error) {
	ret := _m.Called()

	var r0 []types.Service
	if rf, ok := ret.Get(0).(func() []types.Service); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeChecks provides a mock function with given fields: ch
func (_m *Store) SubscribeChecks(ch chan []types.CheckSpec) {
	_m.Called(ch)
}

// SubscribeDestinations provides a mock function with given fields: ch
func (_m *Store) SubscribeDestinations(ch chan []types.Destination) {
	_m.Called(ch)
}

// SubscribeServices provides a mock function with given fields: ch
func (_m *Store) SubscribeServices(ch chan []types.Service) {
	_m.Called(ch)
}

// WatchChecks provides a mock function with given fields:
func (_m *Store) WatchChecks() {
	_m.Called()
}

// WatchDestinations provides a mock function with given fields:
func (_m *Store) WatchDestinations() {
	_m.Called()
}

// WatchServices provides a mock function with given fields:
func (_m *Store) WatchServices() {
	_m.Called()
}

var _ store.Store = (*Store)(nil)
