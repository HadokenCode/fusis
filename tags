!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddDestination	engine/bolt.go	/^func (s *BoltDB) AddDestination(dst *Destination) error {$/;"	f
AddDestination	engine/engine.go	/^func AddDestination(svc *Service, dst *Destination) error {$/;"	f
AddService	engine/bolt.go	/^func (s *BoltDB) AddService(svc *Service) error {$/;"	f
AddService	engine/engine.go	/^func AddService(svc *Service) error {$/;"	f
Agent	fusis/agent.go	/^type Agent struct {$/;"	t
AgentConfig	fusis/config.go	/^type AgentConfig struct {$/;"	t
ApiService	api/api.go	/^type ApiService struct {$/;"	t
Balancer	fusis/balancer.go	/^type Balancer struct {$/;"	t
BoltDB	engine/bolt.go	/^type BoltDB struct {$/;"	t
Config	fusis/config.go	/^type Config struct {$/;"	t
DeleteDestination	engine/bolt.go	/^func (s *BoltDB) DeleteDestination(dst *Destination) error {$/;"	f
DeleteDestination	engine/engine.go	/^func DeleteDestination(id string) error {$/;"	f
Destination	engine/models.go	/^type Destination struct {$/;"	t
EtcdSuite	api/api_test.go	/^type EtcdSuite struct {$/;"	t
Execute	command/fusis.go	/^func Execute() {$/;"	f
FusisCmd	command/fusis.go	/^var FusisCmd = &cobra.Command{$/;"	v
GetDestination	engine/bolt.go	/^func (s *BoltDB) GetDestination(id string) *Destination {$/;"	f
GetId	engine/models.go	/^func (dst Destination) GetId() string {$/;"	f
GetId	engine/models.go	/^func (svc Service) GetId() string {$/;"	f
GetIpByInterface	fusis/config.go	/^func (c *AgentConfig) GetIpByInterface() (string, error) {$/;"	f
GetIpByInterface	fusis/config.go	/^func (c *Config) GetIpByInterface() (string, error) {$/;"	f
GetService	engine/bolt.go	/^func (s *BoltDB) GetService(serviceId string) (*Service, error) {$/;"	f
GetServiceFromId	engine/models.go	/^func GetServiceFromId(serviceId string) (*Service, error) {$/;"	f
GetServices	engine/engine.go	/^func GetServices() (*[]Service, error) {$/;"	f
IPVSAddDestination	engine/ipvs.go	/^func IPVSAddDestination(svc ipvs.Service, dst ipvs.Destination) error {$/;"	f
IPVSAddService	engine/ipvs.go	/^func IPVSAddService(svc *ipvs.Service) error {$/;"	f
IPVSDeleteDestination	engine/ipvs.go	/^func IPVSDeleteDestination(svc ipvs.Service, dst ipvs.Destination) error {$/;"	f
IPVSFlush	engine/ipvs.go	/^func IPVSFlush() error {$/;"	f
IPVSGetServices	engine/ipvs.go	/^func IPVSGetServices() ([]*ipvs.Service, error) {$/;"	f
Join	fusis/agent.go	/^func (a *Agent) Join(existing []string, ignoreOld bool) (n int, err error) {$/;"	f
NatMode	engine/models.go	/^const ($/;"	c
NewAPI	api/api.go	/^func NewAPI(env string) ApiService {$/;"	f
NewAgent	fusis/agent.go	/^func NewAgent(config *AgentConfig) (*Agent, error) {$/;"	f
NewBalancer	fusis/balancer.go	/^func NewBalancer() (*Balancer, error) {$/;"	f
NewService	engine/models.go	/^func NewService(s *ipvs.Service) Service {$/;"	f
NewStore	engine/bolt.go	/^func NewStore() (*BoltDB, error) {$/;"	f
RouteMode	engine/models.go	/^	TunnelMode = ipvs.DFForwardTunnel$/;"	c
Serve	api/api.go	/^func (as ApiService) Serve() {$/;"	f
Service	engine/models.go	/^type Service struct {$/;"	t
SetUpSuite	api/api_test.go	/^func (s *EtcdSuite) SetUpSuite(c *C) {$/;"	f
SetUpTest	api/api_test.go	/^func (s *EtcdSuite) SetUpTest(c *C) {$/;"	f
Start	fusis/agent.go	/^func (a *Agent) Start() error {$/;"	f
Start	fusis/balancer.go	/^func (b *Balancer) Start(config Config) error {$/;"	f
Store	engine/store.go	/^type Store interface {$/;"	t
Test	api/api_test.go	/^func Test(t *testing.T) { TestingT(t) }$/;"	f
TestDeleteDestination	api/api_test.go	/^func (s *EtcdSuite) TestDeleteDestination(c *C) {$/;"	f
TestDeleteService	api/api_test.go	/^func (s *EtcdSuite) TestDeleteService(c *C) {$/;"	f
TestGestServices	api/api_test.go	/^func (s *EtcdSuite) TestGestServices(c *C) {$/;"	f
TestUpsertDestination	api/api_test.go	/^func (s *EtcdSuite) TestUpsertDestination(c *C) {$/;"	f
TestUpsertService	api/api_test.go	/^func (s *EtcdSuite) TestUpsertService(c *C) {$/;"	f
ToIpvsDestination	engine/models.go	/^func (d Destination) ToIpvsDestination() *ipvs.Destination {$/;"	f
ToIpvsService	engine/models.go	/^func (s Service) ToIpvsService() *ipvs.Service {$/;"	f
ToJson	engine/models.go	/^func (d Destination) ToJson() ([]byte, error) {$/;"	f
ToJson	engine/models.go	/^func (s Service) ToJson() ([]byte, error) {$/;"	f
TunnelMode	engine/models.go	/^	NatMode    = ipvs.DFForwardMasq$/;"	c
_	api/api_test.go	/^var _ = Suite(&EtcdSuite{})$/;"	v
agentCmd	command/agent.go	/^var agentCmd = &cobra.Command{$/;"	v
agentConfig	command/agent.go	/^var agentConfig fusis.AgentConfig$/;"	v
api	api/api.go	/^package api$/;"	p
api	api/client.go	/^package api$/;"	p
api	api/handlers.go	/^package api$/;"	p
api_test	api/api_test.go	/^package api_test$/;"	p
balancerCmd	command/balancer.go	/^var balancerCmd = &cobra.Command{$/;"	v
broadcastToBalancers	fusis/agent.go	/^func (a *Agent) broadcastToBalancers() {$/;"	f
cfgFile	command/fusis.go	/^var cfgFile string$/;"	v
command	command/agent.go	/^package command$/;"	p
command	command/balancer.go	/^package command$/;"	p
command	command/fusis.go	/^package command$/;"	p
createBucket	engine/bolt.go	/^func createBucket(db *bolt.DB, name string) error {$/;"	f
destinationDelete	api/handlers.go	/^func (as ApiService) destinationDelete(c *gin.Context) {$/;"	f
destinationFlagsToString	engine/models.go	/^func destinationFlagsToString(flags ipvs.DestinationFlags) string {$/;"	f
destinationUpsert	api/handlers.go	/^func (as ApiService) destinationUpsert(c *gin.Context) {$/;"	f
destinations	engine/bolt.go	/^	services     = []byte("services")$/;"	v
engine	engine/bolt.go	/^package engine$/;"	p
engine	engine/engine.go	/^package engine$/;"	p
engine	engine/ipvs.go	/^package engine$/;"	p
engine	engine/models.go	/^package engine$/;"	p
engine	engine/store.go	/^package engine$/;"	p
flush	api/handlers.go	/^func (as ApiService) flush(c *gin.Context) {$/;"	f
flushStoreAndIpvs	api/api_test.go	/^func flushStoreAndIpvs() {$/;"	f
fusis	fusis/agent.go	/^package fusis$/;"	p
fusis	fusis/balancer.go	/^package fusis$/;"	p
fusis	fusis/config.go	/^package fusis$/;"	p
fusisConfig	command/fusis.go	/^var fusisConfig fusis.Config$/;"	v
handleEvents	fusis/agent.go	/^func (a *Agent) handleEvents() {$/;"	f
handleEvents	fusis/balancer.go	/^func (b *Balancer) handleEvents() {$/;"	f
handleMemberLeave	fusis/balancer.go	/^func (b *Balancer) handleMemberLeave(memberEvent serf.MemberEvent) {$/;"	f
handleQuery	fusis/balancer.go	/^func (b *Balancer) handleQuery(query *serf.Query) {$/;"	f
init	command/agent.go	/^func init() {$/;"	f
init	command/balancer.go	/^func init() {$/;"	f
init	command/fusis.go	/^func init() {$/;"	f
init	engine/engine.go	/^func init() {$/;"	f
initConfig	command/fusis.go	/^func initConfig() {$/;"	f
initIPVS	engine/ipvs.go	/^func initIPVS() {$/;"	f
ipProtoToString	engine/models.go	/^func ipProtoToString(proto ipvs.IPProto) string {$/;"	f
main	main.go	/^func main() {$/;"	f
main	main.go	/^package main$/;"	p
main	net/main.go	/^func main() {$/;"	f
main	net/main.go	/^package main$/;"	p
mt	engine/ipvs.go	/^var mt sync.Mutex$/;"	v
newDestinationRequest	engine/models.go	/^func newDestinationRequest(d *ipvs.Destination) Destination {$/;"	f
onChange	coverage.html	/^		function onChange() {$/;"	f
run	command/balancer.go	/^func run(cmd *cobra.Command, args []string) {$/;"	f
runAgentCmd	command/agent.go	/^func runAgentCmd(cmd *cobra.Command, args []string) {$/;"	f
serviceCreate	api/handlers.go	/^func (as ApiService) serviceCreate(c *gin.Context) {$/;"	f
serviceDelete	api/handlers.go	/^func (as ApiService) serviceDelete(c *gin.Context) {$/;"	f
serviceList	api/handlers.go	/^func (as ApiService) serviceList(c *gin.Context) {$/;"	f
services	engine/bolt.go	/^var ($/;"	v
setupConfig	command/agent.go	/^func setupConfig() {$/;"	f
store	engine/engine.go	/^var store *BoltDB$/;"	v
stringToDestinationFlags	engine/models.go	/^func stringToDestinationFlags(s string) ipvs.DestinationFlags {$/;"	f
stringToIPProto	engine/models.go	/^func stringToIPProto(s string) ipvs.IPProto {$/;"	f
waitSignals	command/fusis.go	/^func waitSignals() {$/;"	f
