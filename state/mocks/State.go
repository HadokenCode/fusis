// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import state "github.com/luizbafilho/fusis/state"
import types "github.com/luizbafilho/fusis/types"

// State is an autogenerated mock type for the State type
type State struct {
	mock.Mock
}

// AddCheck provides a mock function with given fields: c
func (_m *State) AddCheck(c types.CheckSpec) {
	_m.Called(c)
}

// AddDestination provides a mock function with given fields: dst
func (_m *State) AddDestination(dst types.Destination) {
	_m.Called(dst)
}

// AddService provides a mock function with given fields: svc
func (_m *State) AddService(svc types.Service) {
	_m.Called(svc)
}

// Copy provides a mock function with given fields:
func (_m *State) Copy() state.State {
	ret := _m.Called()

	var r0 state.State
	if rf, ok := ret.Get(0).(func() state.State); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(state.State)
		}
	}

	return r0
}

// DeleteDestination provides a mock function with given fields: dst
func (_m *State) DeleteDestination(dst types.Destination) {
	_m.Called(dst)
}

// GetChecks provides a mock function with given fields:
func (_m *State) GetChecks() []types.CheckSpec {
	ret := _m.Called()

	var r0 []types.CheckSpec
	if rf, ok := ret.Get(0).(func() []types.CheckSpec); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.CheckSpec)
		}
	}

	return r0
}

// GetDestinations provides a mock function with given fields: svc
func (_m *State) GetDestinations(svc *types.Service) []types.Destination {
	ret := _m.Called(svc)

	var r0 []types.Destination
	if rf, ok := ret.Get(0).(func(*types.Service) []types.Destination); ok {
		r0 = rf(svc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Destination)
		}
	}

	return r0
}

// GetServices provides a mock function with given fields:
func (_m *State) GetServices() []types.Service {
	ret := _m.Called()

	var r0 []types.Service
	if rf, ok := ret.Get(0).(func() []types.Service); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Service)
		}
	}

	return r0
}

// SetChecks provides a mock function with given fields: checks
func (_m *State) SetChecks(checks state.Checks) {
	_m.Called(checks)
}
